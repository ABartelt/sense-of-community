---
# Source: shiftplanner/charts/keycloak/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: test-keycloak
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 7800
        - port: 8080
---
# Source: shiftplanner/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: shiftplanner-postgresql
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/version: 17.4.0
    helm.sh/chart: postgresql-16.6.0
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: shiftplanner-postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: shiftplanner/charts/keycloak/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-keycloak
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
---
# Source: shiftplanner/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: shiftplanner-postgresql
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/version: 17.4.0
    helm.sh/chart: postgresql-16.6.0
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: shiftplanner-postgresql
      app.kubernetes.io/component: primary
---
# Source: shiftplanner/charts/api/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-api
  labels:
    helm.sh/chart: api-0.1.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: shiftplanner/charts/client/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-client
  labels:
    helm.sh/chart: client-0.1.0
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: shiftplanner/charts/keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-keycloak
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: false
---
# Source: shiftplanner/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shiftplanner-postgresql
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/version: 17.4.0
    helm.sh/chart: postgresql-16.6.0
automountServiceAccountToken: false
---
# Source: shiftplanner/charts/api/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: muddi-admin-pw
  labels:
    
    helm.sh/chart: api-0.1.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  MuddiConnect__AdminPassword: "NWdJdHR1NExRQ1BUSWxXVg=="
---
# Source: shiftplanner/templates/keycloak-auth-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-auth-credentials
  namespace: ttn-shiftplanner
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  admin-password: "bHhUbFZId1hmTmxJdXlHSw=="
  management-password: "TkxHZU1LaFNEUUdRelV4eA=="
---
# Source: shiftplanner/templates/postgresql-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: ttn-shiftplanner
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  password: "QmVYTXFvT3VjZlBpbFR0RmxIS1JqeG1jakJoZGxCaW4="
  postgres-password: "cHRPUm5Vb1JadFB4b3JlRU16dUtRaHR3WWdVeFZNVHU="
  keycloak-password: cXVaSHVKRmh4WHpuRk1yTFpUa3FWaGNnUUhxUE1hVng=
  shiftplanner-password: VlNmV3BOT2h2bWthWE9uUXJoSU9DTUZOSXNmaURSbHQ=
---
# Source: shiftplanner/templates/postgresql-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pg-init
  namespace: ttn-shiftplanner
stringData:
  init.sql: |
    --keycloak
    CREATE DATABASE bitnami_keycloak;

    CREATE USER bn_keycloak  WITH encrypted password 'quZHuJFhxXznFMrLZTkqVhcgQHqPMaVx';
    
    GRANT ALL PRIVILEGES ON DATABASE bitnami_keycloak TO bn_keycloak;
    ALTER DATABASE bitnami_keycloak OWNER TO bn_keycloak;

    --shiftplanner
    CREATE DATABASE shiftplanner-db;
    CREATE USER shiftplanner-user  WITH encrypted password 'VSfWpNOhvmkaXOnQrhIOCMFNIsfiDRlt';
    
    GRANT ALL PRIVILEGES ON DATABASE shiftplanner-db TO shiftplanner-user;
    ALTER DATABASE shiftplanner-db OWNER TO shiftplanner-user;
    \c shiftplanner-db;
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    
    -- Create schema
    CREATE SCHEMA IF NOT EXISTS shiftplanner;
    
    -- Set search path
    SET search_path TO shiftplanner, public;
    
    -- Create tables
    CREATE TABLE IF NOT EXISTS shiftplanner.users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        external_id VARCHAR(255) NOT NULL UNIQUE,
        email VARCHAR(255) NOT NULL UNIQUE,
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS shiftplanner.shifts (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        title VARCHAR(255) NOT NULL,
        description TEXT,
        start_time TIMESTAMP WITH TIME ZONE NOT NULL,
        end_time TIMESTAMP WITH TIME ZONE NOT NULL,
        created_by UUID REFERENCES shiftplanner.users(id),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS shiftplanner.shift_assignments (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        shift_id UUID REFERENCES shiftplanner.shifts(id),
        user_id UUID REFERENCES shiftplanner.users(id),
        status VARCHAR(50) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(shift_id, user_id)
    );
    
    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_shifts_start_time ON shiftplanner.shifts(start_time);
    CREATE INDEX IF NOT EXISTS idx_shifts_end_time ON shiftplanner.shifts(end_time);
    CREATE INDEX IF NOT EXISTS idx_shift_assignments_shift_id ON shiftplanner.shift_assignments(shift_id);
    CREATE INDEX IF NOT EXISTS idx_shift_assignments_user_id ON shiftplanner.shift_assignments(user_id);
    
    -- Create updated_at trigger function
    CREATE OR REPLACE FUNCTION shiftplanner.update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    -- Create triggers
    CREATE TRIGGER update_users_updated_at
        BEFORE UPDATE ON shiftplanner.users
        FOR EACH ROW
        EXECUTE FUNCTION shiftplanner.update_updated_at_column();
    
    CREATE TRIGGER update_shifts_updated_at
        BEFORE UPDATE ON shiftplanner.shifts
        FOR EACH ROW
        EXECUTE FUNCTION shiftplanner.update_updated_at_column();
    
    CREATE TRIGGER update_shift_assignments_updated_at
        BEFORE UPDATE ON shiftplanner.shift_assignments
        FOR EACH ROW
        EXECUTE FUNCTION shiftplanner.update_updated_at_column();
---
# Source: shiftplanner/charts/api/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-api
  labels:
    
    helm.sh/chart: api-0.1.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  Database__USER: "shiftplanner-user"
  Database__Name: "shiftplanner-db"
  Database__HOST: "shiftplanner-postgresql"
  Database__PORT: "5432"
  Cors__Origins__0: "[\"localhost\",\"connect.der-ttn.de\",\"doppelschicht.der-ttn.de\"]"
---
# Source: shiftplanner/charts/client/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-client
  labels:
    
    helm.sh/chart: client-0.1.0
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  appsettings.json: |
    {
      "OAuth": {
        "Audience": "shift-planner",
        "Authority": "https://connect.der-ttn.de/realms/muddi",
        "AdminUser": "api-admin@muddimarkt.org",
        "AdminPassword": "$MuddiConnect__AdminPassword"
      },
      "ShiftApi": {
        "BaseUrl": "https://doppelschicht-api.der-ttn.de"
      },
      "Cors": {
        "Origins": "[\"localhost\",\"connect.der-ttn.de\",\"doppelschicht.der-ttn.de\"]"
      },
      "Logging": {
        "LogLevel": {
          "Default": "Error",
          "Microsoft.AspNetCore": "Warning",
          "HubConnection": "Warning",
          "System": "None"
        }
      }
    }
  manifest.json: |
    {
      "name": "Techno TÜV Nord Schichtplanner",
      "short_name": "TTN-shifts",
      "start_url": "./",
      "display": "standalone",
      "background_color": "#ffffff",
      "theme_color": "#090786",
      "prefer_related_applications": false,
      "icons": [
        {
          "src": "favicon.png",
          "type": "image/png",
          "sizes": "192x192"
        },
        {
          "src": "favicon.ico",
          "type": "image/x-icon",
          "sizes": "192x192"
        }
      ]
    }
  customization.css: |
    :root {
      --main-primary: #090786;
    }
---
# Source: shiftplanner/charts/keycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-keycloak-env-vars
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
data:
  KC_BOOTSTRAP_ADMIN_USERNAME: "user"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY_HEADERS: ""
  KEYCLOAK_HOSTNAME: |-
    http://connect.der-ttn.de/
  KEYCLOAK_HOSTNAME_STRICT: "false"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "shiftplanner-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "bitnami_keycloak"
  KEYCLOAK_DATABASE_USER: "bn_keycloak"
  KEYCLOAK_PRODUCTION: "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=test-keycloak-headless.ttn-shiftplanner.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KEYCLOAK_LOG_LEVEL: "INFO"
---
# Source: shiftplanner/templates/keycloak-realm-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name:  keycloak-realm-configmap
  namespace: ttn-shiftplanner
data:
  realm.json: |
    {
        "id": "muddi",
        "realm": "muddi",
        "notBefore": 0,
        "defaultSignatureAlgorithm": "RS256",
        "revokeRefreshToken": false,
        "refreshTokenMaxReuse": 0,
        "accessTokenLifespan": 300,
        "accessTokenLifespanForImplicitFlow": 900,
        "ssoSessionIdleTimeout": 1800,
        "ssoSessionMaxLifespan": 36000,
        "ssoSessionIdleTimeoutRememberMe": 0,
        "ssoSessionMaxLifespanRememberMe": 0,
        "offlineSessionIdleTimeout": 2592000,
        "offlineSessionMaxLifespanEnabled": false,
        "offlineSessionMaxLifespan": 5184000,
        "clientSessionIdleTimeout": 0,
        "clientSessionMaxLifespan": 0,
        "clientOfflineSessionIdleTimeout": 0,
        "clientOfflineSessionMaxLifespan": 0,
        "accessCodeLifespan": 60,
        "accessCodeLifespanUserAction": 300,
        "accessCodeLifespanLogin": 1800,
        "actionTokenGeneratedByAdminLifespan": 43200,
        "actionTokenGeneratedByUserLifespan": 300,
        "oauth2DeviceCodeLifespan": 600,
        "oauth2DevicePollingInterval": 5,
        "enabled": true,
        "sslRequired": "external",
        "registrationAllowed": true,
        "registrationEmailAsUsername": true,
        "rememberMe": true,
        "verifyEmail": true,
        "loginWithEmailAllowed": true,
        "duplicateEmailsAllowed": false,
        "resetPasswordAllowed": true,
        "editUsernameAllowed": false,
        "bruteForceProtected": false,
        "permanentLockout": false,
        "maxFailureWaitSeconds": 900,
        "minimumQuickLoginWaitSeconds": 60,
        "waitIncrementSeconds": 60,
        "quickLoginCheckMilliSeconds": 1000,
        "maxDeltaTimeSeconds": 43200,
        "failureFactor": 30,
        "roles": {
            "realm": [
                {
                    "id": "3150c99d-6c62-4088-b3da-371d38c3c84a",
                    "name": "default-roles-muddi",
                    "description": "${role_default-roles}",
                    "composite": true,
                    "composites": {
                        "realm": [
                            "offline_access",
                            "uma_authorization"
                        ],
                        "client": {
                            "shift-planner": [
                                "editor",
                                "viewer"
                            ],
                            "account": [
                                "manage-account",
                                "view-profile"
                            ]
                        }
                    },
                    "clientRole": false,
                    "containerId": "muddi",
                    "attributes": {}
                },
                {
                    "id": "9f39f57e-45ef-42c5-bd8d-cd2707464ddd",
                    "name": "uma_authorization",
                    "description": "${role_uma_authorization}",
                    "composite": false,
                    "clientRole": false,
                    "containerId": "muddi",
                    "attributes": {}
                },
                {
                    "id": "10012422-b80a-4e85-a640-a4ff81d5f511",
                    "name": "offline_access",
                    "description": "${role_offline-access}",
                    "composite": false,
                    "clientRole": false,
                    "containerId": "muddi",
                    "attributes": {}
                }
            ],
            "client": {
                "realm-management": [
                    {
                        "id": "eb510adc-217f-49fc-ad48-8cc502fe1b0d",
                        "name": "query-users",
                        "description": "${role_query-users}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "2d0203a3-7dae-499d-9519-52110745d44f",
                        "name": "view-events",
                        "description": "${role_view-events}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "479859fe-f051-470c-ae9e-b18fa461c01b",
                        "name": "manage-events",
                        "description": "${role_manage-events}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "ec89a113-e278-4b25-9869-efc0e9fa6deb",
                        "name": "view-users",
                        "description": "${role_view-users}",
                        "composite": true,
                        "composites": {
                            "client": {
                                "realm-management": [
                                    "query-users",
                                    "query-groups"
                                ]
                            }
                        },
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "2b9091a0-93aa-4a01-acc3-d68dbf42b462",
                        "name": "manage-users",
                        "description": "${role_manage-users}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "bd2b0769-17ce-49f6-b59b-51f0b3fc889a",
                        "name": "query-groups",
                        "description": "${role_query-groups}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "a7072e5e-5dc7-41e5-aaa2-1d9e48878457",
                        "name": "create-client",
                        "description": "${role_create-client}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "851578cf-1fd5-4b1d-8648-6c4747685028",
                        "name": "query-clients",
                        "description": "${role_query-clients}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "972f3ec0-ce5e-4320-b932-af91a684ad39",
                        "name": "view-authorization",
                        "description": "${role_view-authorization}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "741b0362-bc35-4c69-adef-66c2ccb5c2ba",
                        "name": "view-realm",
                        "description": "${role_view-realm}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "eb4d1bb8-41ed-4d06-aba4-72945cb79e3a",
                        "name": "manage-authorization",
                        "description": "${role_manage-authorization}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "1bc76921-fe69-41c4-a4c1-e313a19622b0",
                        "name": "realm-admin",
                        "description": "${role_realm-admin}",
                        "composite": true,
                        "composites": {
                            "client": {
                                "realm-management": [
                                    "query-users",
                                    "view-events",
                                    "manage-events",
                                    "view-users",
                                    "manage-users",
                                    "query-groups",
                                    "create-client",
                                    "query-clients",
                                    "view-authorization",
                                    "view-realm",
                                    "manage-authorization",
                                    "view-clients",
                                    "view-identity-providers",
                                    "manage-realm",
                                    "manage-identity-providers",
                                    "query-realms",
                                    "manage-clients",
                                    "impersonation"
                                ]
                            }
                        },
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "c126ae3c-364c-4542-a1d3-f4aa2a8edee8",
                        "name": "view-clients",
                        "description": "${role_view-clients}",
                        "composite": true,
                        "composites": {
                            "client": {
                                "realm-management": [
                                    "query-clients"
                                ]
                            }
                        },
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "edc9029b-865a-43b4-b03a-a466e94a5d94",
                        "name": "view-identity-providers",
                        "description": "${role_view-identity-providers}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "bd29f9e4-5497-41a0-b566-b92feb938f7f",
                        "name": "manage-realm",
                        "description": "${role_manage-realm}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "f0d4b69b-b9e8-438a-8d99-8f2a34c2d7ad",
                        "name": "manage-identity-providers",
                        "description": "${role_manage-identity-providers}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "9d06560b-1a44-4412-a85f-ad0e985553f7",
                        "name": "manage-clients",
                        "description": "${role_manage-clients}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "2c554324-4946-4ccc-b3ea-f314665a384d",
                        "name": "query-realms",
                        "description": "${role_query-realms}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    },
                    {
                        "id": "4ef73195-92a6-4ba0-8dfc-1d62f216b36f",
                        "name": "impersonation",
                        "description": "${role_impersonation}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                        "attributes": {}
                    }
                ],
                "security-admin-console": [],
                "admin-cli": [],
                "shift-planner": [
                    {
                        "id": "334ea6eb-9db3-4a78-aa76-d20d9e8bd559",
                        "name": "admin",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "6681d418-28e0-416f-afdf-255a8df3013c",
                        "attributes": {}
                    },
                    {
                        "id": "751b7069-e443-40b4-8c4d-1e0c4f392195",
                        "name": "editor",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "6681d418-28e0-416f-afdf-255a8df3013c",
                        "attributes": {}
                    },
                    {
                        "id": "8aabbb1c-7b5f-4390-8415-af78868dd3b0",
                        "name": "super-admin",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "6681d418-28e0-416f-afdf-255a8df3013c",
                        "attributes": {}
                    },
                    {
                        "id": "ef355481-1f6e-46fd-8798-0eeeb69cfc55",
                        "name": "viewer",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "6681d418-28e0-416f-afdf-255a8df3013c",
                        "attributes": {}
                    }
                ],
                "account-console": [],
                "broker": [
                    {
                        "id": "687593ae-3477-4066-a17c-edd9b641696a",
                        "name": "read-token",
                        "description": "${role_read-token}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "23f30fa7-a386-425a-a8ca-6cc8a5ba83c0",
                        "attributes": {}
                    }
                ],
                "account": [
                    {
                        "id": "d45f5511-d1c1-4b3b-8651-5e8aa425f303",
                        "name": "manage-account-links",
                        "description": "${role_manage-account-links}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "52e25ca0-1e1a-4106-968d-723faec64084",
                        "attributes": {}
                    },
                    {
                        "id": "472082d5-a258-47d4-bbdd-df07a301170c",
                        "name": "manage-account",
                        "description": "${role_manage-account}",
                        "composite": true,
                        "composites": {
                            "client": {
                                "account": [
                                    "manage-account-links"
                                ]
                            }
                        },
                        "clientRole": true,
                        "containerId": "52e25ca0-1e1a-4106-968d-723faec64084",
                        "attributes": {}
                    },
                    {
                        "id": "81ebe93c-e167-494a-8ef8-2706e66cb8c2",
                        "name": "view-applications",
                        "description": "${role_view-applications}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "52e25ca0-1e1a-4106-968d-723faec64084",
                        "attributes": {}
                    },
                    {
                        "id": "3084f2b5-dcc3-41c3-9a76-58838ccc8cad",
                        "name": "view-consent",
                        "description": "${role_view-consent}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "52e25ca0-1e1a-4106-968d-723faec64084",
                        "attributes": {}
                    },
                    {
                        "id": "ebd0227d-5af8-4dd3-8e1b-2442ed1786a1",
                        "name": "manage-consent",
                        "description": "${role_manage-consent}",
                        "composite": true,
                        "composites": {
                            "client": {
                                "account": [
                                    "view-consent"
                                ]
                            }
                        },
                        "clientRole": true,
                        "containerId": "52e25ca0-1e1a-4106-968d-723faec64084",
                        "attributes": {}
                    },
                    {
                        "id": "62a7b50a-bc46-4cc7-97bf-015c21e0ae65",
                        "name": "view-profile",
                        "description": "${role_view-profile}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "52e25ca0-1e1a-4106-968d-723faec64084",
                        "attributes": {}
                    },
                    {
                        "id": "1add2f98-9517-4dbd-b415-9d2042414686",
                        "name": "delete-account",
                        "description": "${role_delete-account}",
                        "composite": false,
                        "clientRole": true,
                        "containerId": "52e25ca0-1e1a-4106-968d-723faec64084",
                        "attributes": {}
                    }
                ]
            }
        },
        "groups": [],
        "defaultRole": {
            "id": "3150c99d-6c62-4088-b3da-371d38c3c84a",
            "name": "default-roles-muddi",
            "description": "${role_default-roles}",
            "composite": true,
            "clientRole": false,
            "containerId": "muddi"
        },
        "requiredCredentials": [
            "password"
        ],
        "otpPolicyType": "totp",
        "otpPolicyAlgorithm": "HmacSHA1",
        "otpPolicyInitialCounter": 0,
        "otpPolicyDigits": 6,
        "otpPolicyLookAheadWindow": 1,
        "otpPolicyPeriod": 30,
        "otpSupportedApplications": [
            "FreeOTP",
            "Google Authenticator"
        ],
        "webAuthnPolicyRpEntityName": "keycloak",
        "webAuthnPolicySignatureAlgorithms": [
            "ES256"
        ],
        "webAuthnPolicyRpId": "",
        "webAuthnPolicyAttestationConveyancePreference": "not specified",
        "webAuthnPolicyAuthenticatorAttachment": "not specified",
        "webAuthnPolicyRequireResidentKey": "not specified",
        "webAuthnPolicyUserVerificationRequirement": "not specified",
        "webAuthnPolicyCreateTimeout": 0,
        "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
        "webAuthnPolicyAcceptableAaguids": [],
        "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
        "webAuthnPolicyPasswordlessSignatureAlgorithms": [
            "ES256"
        ],
        "webAuthnPolicyPasswordlessRpId": "",
        "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
        "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
        "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
        "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
        "webAuthnPolicyPasswordlessCreateTimeout": 0,
        "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
        "webAuthnPolicyPasswordlessAcceptableAaguids": [],
        "scopeMappings": [
            {
                "clientScope": "offline_access",
                "roles": [
                    "offline_access"
                ]
            }
        ],
        "clientScopeMappings": {
            "account": [
                {
                    "client": "account-console",
                    "roles": [
                        "manage-account"
                    ]
                }
            ]
        },
        "clients": [
            {
                "id": "52e25ca0-1e1a-4106-968d-723faec64084",
                "clientId": "account",
                "name": "${client_account}",
                "rootUrl": "${authBaseUrl}",
                "baseUrl": "/realms/muddi/account/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [
                    "/realms/muddi/account/*"
                ],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                    "web-origins",
                    "acr",
                    "profile",
                    "roles",
                    "email"
                ],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt"
                ]
            },
            {
                "id": "6975b211-aeb7-43fe-a363-1c6d2f7d8605",
                "clientId": "account-console",
                "name": "${client_account-console}",
                "rootUrl": "${authBaseUrl}",
                "baseUrl": "/realms/muddi/account/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [
                    "/realms/muddi/account/*"
                ],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                    "pkce.code.challenge.method": "S256"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "protocolMappers": [
                    {
                        "id": "8f5707aa-ab10-4211-b574-5fa4deb9827f",
                        "name": "audience resolve",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-audience-resolve-mapper",
                        "consentRequired": false,
                        "config": {}
                    }
                ],
                "defaultClientScopes": [
                    "web-origins",
                    "acr",
                    "profile",
                    "roles",
                    "email"
                ],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt"
                ]
            },
            {
                "id": "2ffa2528-8f02-434f-bb21-6cb27add44a3",
                "clientId": "admin-cli",
                "name": "${client_admin-cli}",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": false,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": true,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                    "web-origins",
                    "acr",
                    "profile",
                    "roles",
                    "email"
                ],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt"
                ]
            },
            {
                "id": "23f30fa7-a386-425a-a8ca-6cc8a5ba83c0",
                "clientId": "broker",
                "name": "${client_broker}",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": true,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": false,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                    "web-origins",
                    "acr",
                    "profile",
                    "roles",
                    "email"
                ],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt"
                ]
            },
            {
                "id": "cd3a52ef-1ac2-40e9-8548-b09a33a88ab7",
                "clientId": "realm-management",
                "name": "${client_realm-management}",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": true,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": false,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                    "web-origins",
                    "acr",
                    "profile",
                    "roles",
                    "email"
                ],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt"
                ]
            },
            {
                "id": "bc1c915c-7585-4cd0-b072-55be498eb314",
                "clientId": "security-admin-console",
                "name": "${client_security-admin-console}",
                "rootUrl": "${authAdminUrl}",
                "baseUrl": "/admin/muddi/console/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [
                    "/admin/muddi/console/*"
                ],
                "webOrigins": [
                    "+"
                ],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                    "pkce.code.challenge.method": "S256"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "protocolMappers": [
                    {
                        "id": "3ac33536-72d2-4fb9-9a80-3e92ee9e5917",
                        "name": "locale",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "locale",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "locale",
                            "jsonType.label": "String"
                        }
                    }
                ],
                "defaultClientScopes": [
                    "web-origins",
                    "acr",
                    "profile",
                    "roles",
                    "email"
                ],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt"
                ]
            },
            {
                "id": "6681d418-28e0-416f-afdf-255a8df3013c",
                "clientId": "shift-planner",
                "rootUrl": "http://localhost:5254",
                "adminUrl": "http://localhost:5254",
                "baseUrl": "/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [
                    "*"
                ],
                "webOrigins": [
                    "*"
                ],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": true,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.force.post.binding": "false",
                    "saml.multivalued.roles": "false",
                    "frontchannel.logout.session.required": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "oidc.ciba.grant.enabled": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.client.signature": "false",
                    "saml.allow.ecp.flow": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.assertion.signature": "false",
                    "saml.encrypt": "false",
                    "saml.server.signature": "false",
                    "exclude.session.state.from.auth.response": "false",
                    "saml.artifact.binding": "false",
                    "saml_force_name_id_format": "false",
                    "acr.loa.map": "{}",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "token.response.type.bearer.lower-case": "false",
                    "saml.onetimeuse.condition": "false"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": true,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "a8d6fa96-8bb0-4b4c-bcb1-85e9b71abbbf",
                        "name": "role-mapper",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": false,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "true",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "shift-planner"
                        }
                    },
                    {
                        "id": "1cc370ee-2278-4390-9883-98fcc97e5e05",
                        "name": "audience",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-audience-mapper",
                        "consentRequired": false,
                        "config": {
                            "included.client.audience": "shift-planner",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "included.custom.audience": "shift-planner",
                            "userinfo.token.claim": "false"
                        }
                    }
                ],
                "defaultClientScopes": [
                    "web-origins",
                    "acr",
                    "profile",
                    "roles",
                    "email"
                ],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt"
                ]
            }
        ],
        "clientScopes": [
            {
                "id": "6ed3d200-1518-4891-9dfd-d45c850e6613",
                "name": "web-origins",
                "description": "OpenID Connect scope for add allowed web origins to the access token",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "false",
                    "display.on.consent.screen": "false",
                    "consent.screen.text": ""
                },
                "protocolMappers": [
                    {
                        "id": "3020019b-3f3f-4662-8c24-2a9d9fa10803",
                        "name": "allowed web origins",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-allowed-origins-mapper",
                        "consentRequired": false,
                        "config": {}
                    }
                ]
            },
            {
                "id": "9dd2f08b-eea9-424d-9995-7c98132efe2a",
                "name": "role_list",
                "description": "SAML role list",
                "protocol": "saml",
                "attributes": {
                    "consent.screen.text": "${samlRoleListScopeConsentText}",
                    "display.on.consent.screen": "true"
                },
                "protocolMappers": [
                    {
                        "id": "6507d0fd-e700-44d3-8be3-fa8de478b31c",
                        "name": "role list",
                        "protocol": "saml",
                        "protocolMapper": "saml-role-list-mapper",
                        "consentRequired": false,
                        "config": {
                            "single": "false",
                            "attribute.nameformat": "Basic",
                            "attribute.name": "Role"
                        }
                    }
                ]
            },
            {
                "id": "b188908b-3321-43c1-97ac-22264161eab2",
                "name": "microprofile-jwt",
                "description": "Microprofile - JWT built-in scope",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "true",
                    "display.on.consent.screen": "false"
                },
                "protocolMappers": [
                    {
                        "id": "d6fc88a0-7319-4a62-b21c-4b957a799b93",
                        "name": "upn",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "username",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "upn",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "4432b09b-7601-426a-9f04-16f9cbcc9b59",
                        "name": "groups",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-realm-role-mapper",
                        "consentRequired": false,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "true",
                            "user.attribute": "foo",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "groups",
                            "jsonType.label": "String"
                        }
                    }
                ]
            },
            {
                "id": "feefd24c-6155-43ed-807c-56e26fb0d5a1",
                "name": "address",
                "description": "OpenID Connect built-in scope: address",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "true",
                    "display.on.consent.screen": "true",
                    "consent.screen.text": "${addressScopeConsentText}"
                },
                "protocolMappers": [
                    {
                        "id": "d59145b8-6e72-429c-ad37-dca7d104ec67",
                        "name": "address",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-address-mapper",
                        "consentRequired": false,
                        "config": {
                            "user.attribute.formatted": "formatted",
                            "user.attribute.country": "country",
                            "user.attribute.postal_code": "postal_code",
                            "userinfo.token.claim": "true",
                            "user.attribute.street": "street",
                            "id.token.claim": "true",
                            "user.attribute.region": "region",
                            "access.token.claim": "true",
                            "user.attribute.locality": "locality"
                        }
                    }
                ]
            },
            {
                "id": "6cfcabd7-132c-4a10-b07f-21aace53174b",
                "name": "phone",
                "description": "OpenID Connect built-in scope: phone",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "true",
                    "display.on.consent.screen": "true",
                    "consent.screen.text": "${phoneScopeConsentText}"
                },
                "protocolMappers": [
                    {
                        "id": "01894994-aae3-45df-a8f2-e7166aed0f3e",
                        "name": "phone number verified",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "phoneNumberVerified",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "phone_number_verified",
                            "jsonType.label": "boolean"
                        }
                    },
                    {
                        "id": "cc645fc1-2084-41b0-ac47-ca508d244333",
                        "name": "phone number",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "phoneNumber",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "phone_number",
                            "jsonType.label": "String"
                        }
                    }
                ]
            },
            {
                "id": "d98abd2a-06c6-4fe8-a1de-a48a8de98468",
                "name": "acr",
                "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "false",
                    "display.on.consent.screen": "false"
                },
                "protocolMappers": [
                    {
                        "id": "61f499f4-a2c9-402f-9b25-e325fd44d0f0",
                        "name": "acr loa level",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-acr-mapper",
                        "consentRequired": false,
                        "config": {
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "userinfo.token.claim": "true"
                        }
                    }
                ]
            },
            {
                "id": "b957522b-bba1-4634-8cb8-0046e0abefc7",
                "name": "offline_access",
                "description": "OpenID Connect built-in scope: offline_access",
                "protocol": "openid-connect",
                "attributes": {
                    "consent.screen.text": "${offlineAccessScopeConsentText}",
                    "display.on.consent.screen": "true"
                }
            },
            {
                "id": "b11cd9bc-c817-498b-8ac3-978c29cf82e0",
                "name": "profile",
                "description": "OpenID Connect built-in scope: profile",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "true",
                    "display.on.consent.screen": "true",
                    "consent.screen.text": "${profileScopeConsentText}"
                },
                "protocolMappers": [
                    {
                        "id": "121bd81d-c087-48ba-84ba-cd068dfa2ee4",
                        "name": "updated at",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "updatedAt",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "updated_at",
                            "jsonType.label": "long"
                        }
                    },
                    {
                        "id": "5aaff530-4009-44a9-8e86-6eef671b66cd",
                        "name": "picture",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "picture",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "picture",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "46a56160-59d3-4538-ac74-df8e2c1b8147",
                        "name": "birthdate",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "birthdate",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "birthdate",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "44b699b9-5271-4119-b190-e0552bb7cfbb",
                        "name": "nickname",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "nickname",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "nickname",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "6011ef15-ec1f-41e5-a0dc-acb1239d57d8",
                        "name": "middle name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "middleName",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "middle_name",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "32172c35-6d19-4ba2-8ba4-990f8900e18e",
                        "name": "locale",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "locale",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "locale",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "c2bacc04-b6b4-49ea-8609-6dc07953564f",
                        "name": "full name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-full-name-mapper",
                        "consentRequired": false,
                        "config": {
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "userinfo.token.claim": "true"
                        }
                    },
                    {
                        "id": "d65c027d-d1e5-4b2b-adb8-b0c8b510ebae",
                        "name": "website",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "website",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "website",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "6d6dfe2a-ff5c-40a0-85cb-c0f56a917e3b",
                        "name": "gender",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "gender",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "gender",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "ae77c112-1e49-42d1-8ec4-8f4f8a7e7648",
                        "name": "profile",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "profile",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "profile",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "c546ea09-8378-4865-9145-4250e27f9d13",
                        "name": "zoneinfo",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "zoneinfo",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "zoneinfo",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "8f672ea7-0e19-4a73-a00b-efe7087988b2",
                        "name": "family name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "lastName",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "family_name",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "2ee7880c-da4c-48fd-a9ad-88e5fa4b2415",
                        "name": "username",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "username",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "preferred_username",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "024a3f81-2173-4f18-9b87-86cd9bca44e2",
                        "name": "given name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "firstName",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "given_name",
                            "jsonType.label": "String"
                        }
                    }
                ]
            },
            {
                "id": "e4a6e389-0ead-49f1-94bd-83984a6a3cc8",
                "name": "email",
                "description": "OpenID Connect built-in scope: email",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "true",
                    "display.on.consent.screen": "true",
                    "consent.screen.text": "${emailScopeConsentText}"
                },
                "protocolMappers": [
                    {
                        "id": "6337b9a1-705b-44b5-99b6-f03999f9306d",
                        "name": "email",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "email",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "email",
                            "jsonType.label": "String"
                        }
                    },
                    {
                        "id": "cd6b4d8d-6fa0-44db-9f68-dc9db3b256d8",
                        "name": "email verified",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "emailVerified",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "email_verified",
                            "jsonType.label": "boolean"
                        }
                    }
                ]
            },
            {
                "id": "03ac7776-2750-4d4b-b0cb-c1138f9b8a69",
                "name": "roles",
                "description": "OpenID Connect scope for add user roles to the access token",
                "protocol": "openid-connect",
                "attributes": {
                    "include.in.token.scope": "false",
                    "display.on.consent.screen": "true",
                    "consent.screen.text": "${rolesScopeConsentText}"
                },
                "protocolMappers": [
                    {
                        "id": "e1c811c7-2323-452f-ab52-21417b3fe35a",
                        "name": "audience resolve",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-audience-resolve-mapper",
                        "consentRequired": false,
                        "config": {}
                    },
                    {
                        "id": "d0ad74b8-795f-4645-81d2-4276c07e6c32",
                        "name": "client roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": false,
                        "config": {
                            "user.attribute": "foo",
                            "access.token.claim": "true",
                            "claim.name": "resource_access.${client_id}.roles",
                            "jsonType.label": "String",
                            "multivalued": "true"
                        }
                    },
                    {
                        "id": "cbe1fffe-0895-4a53-9e90-a217ba438c86",
                        "name": "realm roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-realm-role-mapper",
                        "consentRequired": false,
                        "config": {
                            "user.attribute": "foo",
                            "access.token.claim": "true",
                            "claim.name": "realm_access.roles",
                            "jsonType.label": "String",
                            "multivalued": "true"
                        }
                    }
                ]
            }
        ],
        "defaultDefaultClientScopes": [
            "roles",
            "web-origins",
            "role_list",
            "profile",
            "acr",
            "email"
        ],
        "defaultOptionalClientScopes": [
            "phone",
            "microprofile-jwt",
            "offline_access",
            "address"
        ],
        "browserSecurityHeaders": {
            "contentSecurityPolicyReportOnly": "",
            "xContentTypeOptions": "nosniff",
            "xRobotsTag": "none",
            "xFrameOptions": "SAMEORIGIN",
            "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
            "xXSSProtection": "1; mode=block",
            "strictTransportSecurity": "max-age=31536000; includeSubDomains"
        },
        "smtpServer": {
            "password": "**********",
            "starttls": "",
            "auth": "true",
            "port": "465",
            "host": "smtp.strato.de",
            "from": "noreply@muddi.reble.eu",
            "fromDisplayName": "MUDDIs Schichtplanner",
            "ssl": "true",
            "user": "noreply@muddi.reble.eu"
        },
        "eventsEnabled": false,
        "eventsListeners": [
            "jboss-logging"
        ],
        "enabledEventTypes": [],
        "adminEventsEnabled": false,
        "adminEventsDetailsEnabled": false,
        "identityProviders": [],
        "identityProviderMappers": [],
        "components": {
            "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
                {
                    "id": "54c610ba-e7d4-4733-9e9d-5420a090e460",
                    "name": "Allowed Protocol Mapper Types",
                    "providerId": "allowed-protocol-mappers",
                    "subType": "authenticated",
                    "subComponents": {},
                    "config": {
                        "allowed-protocol-mapper-types": [
                            "oidc-full-name-mapper",
                            "oidc-address-mapper",
                            "saml-user-attribute-mapper",
                            "saml-role-list-mapper",
                            "oidc-usermodel-property-mapper",
                            "saml-user-property-mapper",
                            "oidc-usermodel-attribute-mapper",
                            "oidc-sha256-pairwise-sub-mapper"
                        ]
                    }
                },
                {
                    "id": "df127623-a999-451e-b03a-4169670f83a4",
                    "name": "Allowed Protocol Mapper Types",
                    "providerId": "allowed-protocol-mappers",
                    "subType": "anonymous",
                    "subComponents": {},
                    "config": {
                        "allowed-protocol-mapper-types": [
                            "saml-user-attribute-mapper",
                            "oidc-address-mapper",
                            "saml-user-property-mapper",
                            "oidc-sha256-pairwise-sub-mapper",
                            "oidc-usermodel-attribute-mapper",
                            "oidc-usermodel-property-mapper",
                            "oidc-full-name-mapper",
                            "saml-role-list-mapper"
                        ]
                    }
                },
                {
                    "id": "c641afcb-89c1-4625-bf36-b49b3c2dc12d",
                    "name": "Full Scope Disabled",
                    "providerId": "scope",
                    "subType": "anonymous",
                    "subComponents": {},
                    "config": {}
                },
                {
                    "id": "f54bd338-7a1a-47b3-b605-e16f8d78137f",
                    "name": "Allowed Client Scopes",
                    "providerId": "allowed-client-templates",
                    "subType": "anonymous",
                    "subComponents": {},
                    "config": {
                        "allow-default-scopes": [
                            "true"
                        ]
                    }
                },
                {
                    "id": "e0b2ad1c-9f14-461e-810c-3b2ad0f3a85c",
                    "name": "Allowed Client Scopes",
                    "providerId": "allowed-client-templates",
                    "subType": "authenticated",
                    "subComponents": {},
                    "config": {
                        "allow-default-scopes": [
                            "true"
                        ]
                    }
                },
                {
                    "id": "73eb37b6-223a-482b-8837-7269731d8dff",
                    "name": "Trusted Hosts",
                    "providerId": "trusted-hosts",
                    "subType": "anonymous",
                    "subComponents": {},
                    "config": {
                        "host-sending-registration-request-must-match": [
                            "true"
                        ],
                        "client-uris-must-match": [
                            "true"
                        ]
                    }
                },
                {
                    "id": "1d46d0f2-cd0a-4696-926f-e2e5532b3681",
                    "name": "Consent Required",
                    "providerId": "consent-required",
                    "subType": "anonymous",
                    "subComponents": {},
                    "config": {}
                },
                {
                    "id": "46f00f30-7aad-441d-b60b-bbc0eb3e5ef4",
                    "name": "Max Clients Limit",
                    "providerId": "max-clients",
                    "subType": "anonymous",
                    "subComponents": {},
                    "config": {
                        "max-clients": [
                            "200"
                        ]
                    }
                }
            ],
            "org.keycloak.keys.KeyProvider": [
                {
                    "id": "ebfda5a5-f171-4afd-8a9c-8d443a05a838",
                    "name": "rsa-generated",
                    "providerId": "rsa-generated",
                    "subComponents": {},
                    "config": {
                        "priority": [
                            "100"
                        ]
                    }
                },
                {
                    "id": "06486921-3609-40a4-b364-9f8526bbd8b8",
                    "name": "rsa-enc-generated",
                    "providerId": "rsa-enc-generated",
                    "subComponents": {},
                    "config": {
                        "priority": [
                            "100"
                        ],
                        "algorithm": [
                            "RSA-OAEP"
                        ]
                    }
                },
                {
                    "id": "7a03f93e-4219-4cf3-a596-779466e9c5aa",
                    "name": "hmac-generated",
                    "providerId": "hmac-generated",
                    "subComponents": {},
                    "config": {
                        "priority": [
                            "100"
                        ],
                        "algorithm": [
                            "HS256"
                        ]
                    }
                },
                {
                    "id": "5ddcde07-607a-4c73-849b-c5b7db35a0b9",
                    "name": "aes-generated",
                    "providerId": "aes-generated",
                    "subComponents": {},
                    "config": {
                        "priority": [
                            "100"
                        ]
                    }
                }
            ]
        },
        "internationalizationEnabled": false,
        "supportedLocales": [],
        "authenticationFlows": [
            {
                "id": "1445761b-7122-4d28-8902-89a555884d78",
                "alias": "Account verification options",
                "description": "Method with which to verity the existing account",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "idp-email-verification",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "ALTERNATIVE",
                        "priority": 20,
                        "autheticatorFlow": true,
                        "flowAlias": "Verify Existing Account by Re-authentication",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "2d96f27a-7e91-4ee2-8ad4-ebb2800bcc22",
                "alias": "Authentication Options",
                "description": "Authentication options.",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "basic-auth",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "basic-auth-otp",
                        "authenticatorFlow": false,
                        "requirement": "DISABLED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "auth-spnego",
                        "authenticatorFlow": false,
                        "requirement": "DISABLED",
                        "priority": 30,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "6abb6880-1d3d-49ba-b2be-b44ea587515c",
                "alias": "Browser - Conditional OTP",
                "description": "Flow to determine if the OTP is required for the authentication",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "conditional-user-configured",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "auth-otp-form",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "1698dd84-17d8-4d97-8067-15660658c394",
                "alias": "Direct Grant - Conditional OTP",
                "description": "Flow to determine if the OTP is required for the authentication",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "conditional-user-configured",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "direct-grant-validate-otp",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "d7651ab5-8e82-476f-ae12-accf044f22a7",
                "alias": "First broker login - Conditional OTP",
                "description": "Flow to determine if the OTP is required for the authentication",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "conditional-user-configured",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "auth-otp-form",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "f1882464-44e8-497d-b871-92782091209c",
                "alias": "Handle Existing Account",
                "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "idp-confirm-link",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": true,
                        "flowAlias": "Account verification options",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "c2b112be-efc2-4c89-a0ad-a5aac6522f75",
                "alias": "Reset - Conditional OTP",
                "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "conditional-user-configured",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "reset-otp",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "5d68b986-c8c5-49de-9103-8a316d38a57b",
                "alias": "User creation or linking",
                "description": "Flow for the existing/non-existing user alternatives",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticatorConfig": "create unique user config",
                        "authenticator": "idp-create-user-if-unique",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "ALTERNATIVE",
                        "priority": 20,
                        "autheticatorFlow": true,
                        "flowAlias": "Handle Existing Account",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "e72bc7e6-38f4-4a2f-8ae9-2a80d6991b3d",
                "alias": "Verify Existing Account by Re-authentication",
                "description": "Reauthentication of existing account",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "idp-username-password-form",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "CONDITIONAL",
                        "priority": 20,
                        "autheticatorFlow": true,
                        "flowAlias": "First broker login - Conditional OTP",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "1718e6a1-4608-4883-b7c3-13ac50ae2647",
                "alias": "browser",
                "description": "browser based authentication",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "auth-cookie",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "auth-spnego",
                        "authenticatorFlow": false,
                        "requirement": "DISABLED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "identity-provider-redirector",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 25,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "ALTERNATIVE",
                        "priority": 30,
                        "autheticatorFlow": true,
                        "flowAlias": "forms",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "602fdd77-3e3e-4aab-9ece-a556155d827c",
                "alias": "clients",
                "description": "Base authentication for clients",
                "providerId": "client-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "client-secret",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "client-jwt",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "client-secret-jwt",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 30,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "client-x509",
                        "authenticatorFlow": false,
                        "requirement": "ALTERNATIVE",
                        "priority": 40,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "4f4fd86c-3a01-42ca-b582-34765552749b",
                "alias": "direct grant",
                "description": "OpenID Connect Resource Owner Grant",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "direct-grant-validate-username",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "direct-grant-validate-password",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "CONDITIONAL",
                        "priority": 30,
                        "autheticatorFlow": true,
                        "flowAlias": "Direct Grant - Conditional OTP",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "29a50522-f8fa-4565-b972-c505d7471fe1",
                "alias": "docker auth",
                "description": "Used by Docker clients to authenticate against the IDP",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "docker-http-basic-authenticator",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "2a3aaa43-13f9-4a46-85bc-67517b2703ca",
                "alias": "first broker login",
                "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticatorConfig": "review profile config",
                        "authenticator": "idp-review-profile",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": true,
                        "flowAlias": "User creation or linking",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "9040d878-0679-47f4-a84e-efbdbd99cb64",
                "alias": "forms",
                "description": "Username, password, otp and other auth forms.",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "auth-username-password-form",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "CONDITIONAL",
                        "priority": 20,
                        "autheticatorFlow": true,
                        "flowAlias": "Browser - Conditional OTP",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "7244754e-2dfd-4f08-88f5-5c77aa0450ed",
                "alias": "http challenge",
                "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "no-cookie-redirect",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": true,
                        "flowAlias": "Authentication Options",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "b1969aa2-31f5-40ef-905f-dc4162007f90",
                "alias": "registration",
                "description": "registration flow",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "registration-page-form",
                        "authenticatorFlow": true,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": true,
                        "flowAlias": "registration form",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "b067a9a6-6077-4b14-b7c7-8e7571418950",
                "alias": "registration form",
                "description": "registration form",
                "providerId": "form-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "registration-user-creation",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "registration-profile-action",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 40,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "registration-password-action",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 50,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "registration-recaptcha-action",
                        "authenticatorFlow": false,
                        "requirement": "DISABLED",
                        "priority": 60,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "26b645ca-95d3-44d7-add3-7a46e9f4e980",
                "alias": "reset credentials",
                "description": "Reset credentials for a user if they forgot their password or something",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "reset-credentials-choose-user",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "reset-credential-email",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticator": "reset-password",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 30,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    },
                    {
                        "authenticatorFlow": true,
                        "requirement": "CONDITIONAL",
                        "priority": 40,
                        "autheticatorFlow": true,
                        "flowAlias": "Reset - Conditional OTP",
                        "userSetupAllowed": false
                    }
                ]
            },
            {
                "id": "9530d277-62f7-4b6a-b36c-a40d0dc72b0b",
                "alias": "saml ecp",
                "description": "SAML ECP Profile Authentication Flow",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                    {
                        "authenticator": "http-basic-authenticator",
                        "authenticatorFlow": false,
                        "requirement": "REQUIRED",
                        "priority": 10,
                        "autheticatorFlow": false,
                        "userSetupAllowed": false
                    }
                ]
            }
        ],
        "authenticatorConfig": [
            {
                "id": "3fe43339-c89e-48da-a4e7-652ea3ec0ff2",
                "alias": "create unique user config",
                "config": {
                    "require.password.update.after.registration": "false"
                }
            },
            {
                "id": "8d7a7eb5-d0ff-4d1b-89bd-2ddca9c6b81a",
                "alias": "review profile config",
                "config": {
                    "update.profile.on.first.login": "missing"
                }
            }
        ],
        "requiredActions": [
            {
                "alias": "CONFIGURE_TOTP",
                "name": "Configure OTP",
                "providerId": "CONFIGURE_TOTP",
                "enabled": true,
                "defaultAction": false,
                "priority": 10,
                "config": {}
            },
            {
                "alias": "terms_and_conditions",
                "name": "Terms and Conditions",
                "providerId": "terms_and_conditions",
                "enabled": false,
                "defaultAction": false,
                "priority": 20,
                "config": {}
            },
            {
                "alias": "UPDATE_PASSWORD",
                "name": "Update Password",
                "providerId": "UPDATE_PASSWORD",
                "enabled": true,
                "defaultAction": false,
                "priority": 30,
                "config": {}
            },
            {
                "alias": "UPDATE_PROFILE",
                "name": "Update Profile",
                "providerId": "UPDATE_PROFILE",
                "enabled": true,
                "defaultAction": false,
                "priority": 40,
                "config": {}
            },
            {
                "alias": "VERIFY_EMAIL",
                "name": "Verify Email",
                "providerId": "VERIFY_EMAIL",
                "enabled": true,
                "defaultAction": false,
                "priority": 50,
                "config": {}
            },
            {
                "alias": "delete_account",
                "name": "Delete Account",
                "providerId": "delete_account",
                "enabled": false,
                "defaultAction": false,
                "priority": 60,
                "config": {}
            },
            {
                "alias": "update_user_locale",
                "name": "Update User Locale",
                "providerId": "update_user_locale",
                "enabled": true,
                "defaultAction": false,
                "priority": 1000,
                "config": {}
            }
        ],
        "browserFlow": "browser",
        "registrationFlow": "registration",
        "directGrantFlow": "direct grant",
        "resetCredentialsFlow": "reset credentials",
        "clientAuthenticationFlow": "clients",
        "dockerAuthenticationFlow": "docker auth",
        "attributes": {
            "cibaBackchannelTokenDeliveryMode": "poll",
            "cibaExpiresIn": "120",
            "cibaAuthRequestedUserHint": "login_hint",
            "oauth2DeviceCodeLifespan": "600",
            "clientOfflineSessionMaxLifespan": "0",
            "oauth2DevicePollingInterval": "5",
            "clientSessionIdleTimeout": "0",
            "parRequestUriLifespan": "60",
            "clientSessionMaxLifespan": "0",
            "clientOfflineSessionIdleTimeout": "0",
            "cibaInterval": "5"
        },
        "keycloakVersion": "18.0.2",
        "userManagedAccessAllowed": false,
        "clientProfiles": {
            "profiles": []
        },
        "clientPolicies": {
            "policies": []
        }
    }
---
# Source: shiftplanner/charts/api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-api
  labels:
    helm.sh/chart: api-0.1.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: test
---
# Source: shiftplanner/charts/client/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-client
  labels:
    helm.sh/chart: client-0.1.0
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: test
---
# Source: shiftplanner/charts/keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-keycloak-headless
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: test
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: shiftplanner/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-keycloak
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: test
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: shiftplanner/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: shiftplanner-postgresql-hl
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/version: 17.4.0
    helm.sh/chart: postgresql-16.6.0
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: test
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/component: primary
---
# Source: shiftplanner/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: shiftplanner-postgresql
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/version: 17.4.0
    helm.sh/chart: postgresql-16.6.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: test
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/component: primary
---
# Source: shiftplanner/charts/api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-api
  labels:
    helm.sh/chart: api-0.1.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        helm.sh/chart: api-0.1.0
        app.kubernetes.io/name: api
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: test-api
      containers:
        - name: api
          image: "ghcr.io/muddi-markt/shiftplanner/api:v1.2.8"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: test-api
          env:
          - name: MuddiConnect__AdminPassword
            valueFrom:
              secretKeyRef:
                name: muddi-admin-pw
                key: MuddiConnect__AdminPassword
          - name: Database__PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgresql-secret
                key: shiftplanner-password
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
---
# Source: shiftplanner/charts/client/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-client
  labels:
    helm.sh/chart: client-0.1.0
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: client
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        helm.sh/chart: client-0.1.0
        app.kubernetes.io/name: client
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: test-client
      containers:
        - name: client
          image: "ghcr.io/muddi-markt/shiftplanner/client/:v1.2.8"
          imagePullPolicy: IfNotPresent
          env:
          - name: MuddiConnect__AdminPassword
            valueFrom:
              secretKeyRef:
                name: muddi-admin-pw
                key: MuddiConnect__AdminPassword
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: client-config
              mountPath: /usr/share/nginx/html/appsettings.json
              subPath: appsettings.json
            - name: client-config
              mountPath: /usr/share/nginx/html/manifest.json
              subPath: manifest.json
            - name: client-config
              mountPath: /usr/share/nginx/html/customization/customization.css
              subPath: customization.css
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
      volumes:
        - name: client-config
          configMap:
            name: test-client
---
# Source: shiftplanner/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-keycloak
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  serviceName: test-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: c21774862228c69f1ada726f3b33e69d51fd1739dfd4dc9b2cf6de97d1bfd2ee
      labels:
        app.kubernetes.io/instance: test
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/version: 26.1.4
        helm.sh/chart: keycloak-24.5.0
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/app-version: 26.1.4
    spec:
      serviceAccountName: test-keycloak
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: test
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      enableServiceLinks: true
      initContainers:
        - name: prepare-write-dirs
          image: docker.io/bitnami/keycloak:26.1.4-debian-12-r2
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - |
              . /opt/bitnami/scripts/liblog.sh

              info "Copying writable dirs to empty dir"
              # In order to not break the application functionality we need to make some
              # directories writable, so we need to copy it to an empty dir volume
              cp -r --preserve=mode /opt/bitnami/keycloak/lib/quarkus /emptydir/app-quarkus-dir
              cp -r --preserve=mode /opt/bitnami/keycloak/data /emptydir/app-data-dir
              cp -r --preserve=mode /opt/bitnami/keycloak/providers /emptydir/app-providers-dir
              info "Copy operation completed"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
           - name: empty-dir
             mountPath: /emptydir
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:26.1.4-debian-12-r2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD_FILE
              value: /opt/bitnami/keycloak/secrets/admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD_FILE
              value: /opt/bitnami/keycloak/secrets/keycloak-password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/"
            - name: KC_SPI_ADMIN_REALM
              value: "master"
          envFrom:
            - configMapRef:
                name: test-keycloak-env-vars
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 64Mi
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: discovery
              containerPort: 7800
          startupProbe:
            failureThreshold: 60
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /realms/master
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /bitnami/keycloak
              subPath: app-volume-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/lib/quarkus
              subPath: app-quarkus-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/data
              subPath: app-data-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/providers
              subPath: app-providers-dir
            - name: keycloak-secrets
              mountPath: /opt/bitnami/keycloak/secrets
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: keycloak-secrets
          projected:
            sources:
              - secret:
                  name:  keycloak-auth-credentials
              - secret:
                  name:  postgresql-secret
---
# Source: shiftplanner/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: shiftplanner-postgresql
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: shiftplanner-postgresql
    app.kubernetes.io/version: 17.4.0
    helm.sh/chart: postgresql-16.6.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: shiftplanner-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: shiftplanner-postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: shiftplanner-postgresql
      labels:
        app.kubernetes.io/instance: test
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: shiftplanner-postgresql
        app.kubernetes.io/version: 17.4.0
        helm.sh/chart: postgresql-16.6.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: shiftplanner-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: test
                    app.kubernetes.io/name: shiftplanner-postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:17.4.0-debian-12-r11
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: postgres-password
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: custom-init-scripts-secret
              mountPath: /docker-entrypoint-initdb.d/secret
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: custom-init-scripts-secret
          secret:
            secretName: pg-init
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: shiftplanner/charts/api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-api
  labels:
    helm.sh/chart: api-0.1.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: public
  rules:
    - host: "doppelschicht-api.der-ttn.de"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: test-api
                port:
                  number: 80
---
# Source: shiftplanner/charts/client/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-client
  labels:
    helm.sh/chart: client-0.1.0
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: public
  rules:
    - host: "doppelschicht.der-ttn.de"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: test-client
                port:
                  number: 80
---
# Source: shiftplanner/charts/keycloak/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-keycloak
  namespace: "ttn-shiftplanner"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.4
    helm.sh/chart: keycloak-24.5.0
    app.kubernetes.io/component: keycloak
spec:
  ingressClassName: "public"
  rules:
    - host: "connect.der-ttn.de"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: test-keycloak
                port:
                  number: 80
