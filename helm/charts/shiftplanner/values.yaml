global:
  domain: der-ttn.de

postgresql-ha:
  enabled: true
  auth:
    username: keycloak
    password: ${KEYCLOAK_POSTGRES_PASSWORD}
    database: keycloak
  primary:
    persistence:
      enabled: true
      size: 10Gi
  read:
    replicaCount: 1
    persistence:
      enabled: true
      size: 10Gi
  initdb:
    scripts:
      init.sql: |
        CREATE USER ${MUDDI_POSTGRES_USER} WITH PASSWORD '${MUDDI_POSTGRES_PASSWORD}';
        CREATE DATABASE ${MUDDI_POSTGRES_DB} ENCODING UTF8;
        GRANT ALL PRIVILEGES ON DATABASE ${MUDDI_POSTGRES_DB} TO ${MUDDI_POSTGRES_USER};
        ALTER DATABASE ${MUDDI_POSTGRES_DB} OWNER TO ${MUDDI_POSTGRES_USER};
  ingress:
    enabled: false

postgresBackup:
  enabled: true
  image:
    repository: postgres
    tag: "latest"
  schedule: "0 * * * *"  # Every hour
  retentionDays: 7
  volume:
    size: 10Gi
    mountPath: /var/backup
  script: |
    #!/bin/bash
    set -e
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/var/backup"
    
    # Backup Keycloak database
    pg_dump -h postgresql-ha-postgresql -U keycloak -d keycloak > "${BACKUP_DIR}/keycloak_${TIMESTAMP}.sql"
    
    # Backup Muddi database
    pg_dump -h postgresql-ha-postgresql -U ${MUDDI_POSTGRES_USER} -d ${MUDDI_POSTGRES_DB} > "${BACKUP_DIR}/muddi_${TIMESTAMP}.sql"
    
    # Cleanup old backups
    find ${BACKUP_DIR} -type f -name "*.sql" -mtime +${RETENTION_DAYS} -delete

keycloak:
  enabled: true
  auth:
    adminUser: admin
    adminPassword: ${KEYCLOAK_ADMIN_PASSWORD}
  postgresql:
    enabled: false
    external:
      host: postgresql-ha-postgresql
      port: 5432
      user: keycloak
      database: keycloak
      password: ${KEYCLOAK_POSTGRES_PASSWORD}
  ingress:
    enabled: true
    hostname: connect.{{ .Values.global.domain }}
    tls: true
    extraTls:
      - hosts:
          - connect.{{ .Values.global.domain }}
        secretName: letsencrypt
  proxy: edge
  hostname:
    strict: false
    strictBackchannel: false
    admin: connect.{{ .Values.global.domain }}
    adminURL: https://connect.{{ .Values.global.domain }}/admin/
    frontendURL: https://connect.{{ .Values.global.domain }}/

redis-cluster:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 5Gi
  replica:
    replicaCount: 1
    persistence:
      enabled: true
      size: 5Gi
  service:
    ports:
      redis: 6379
  ingress:
    enabled: false

shiftPlannerApi:
  image:
    repository: ghcr.io/muddi-markt/shiftplanner/api
    tag: "v1.2"
  environment:
    Database__USER: ${MUDDI_POSTGRES_USER}
    Database__Name: ${MUDDI_POSTGRES_DB}
    Database__HOST: postgresql-ha-postgresql
    Database__PORT: 5432
    MuddiConnect__AdminPassword: admin
    Cors__Origins__0: "https://doppelschicht.{{ .Values.global.domain }},https://connect.{{ .Values.global.domain }},localhost"
  ingress:
    enabled: true
    hostname: api-doppelschicht.{{ .Values.global.domain }}
    tls:
      enabled: true
      certResolver: letsencrypt
    annotations:
      traefik.ingress.kubernetes.io/router.middlewares: cors-middleware

shiftPlannerClient:
  image:
    repository: ghcr.io/muddi-markt/shiftplanner/client
    tag: "v1.2"
  ingress:
    enabled: true
    hostname: doppelschicht.{{ .Values.global.domain }}
    tls:
      enabled: true
      certResolver: letsencrypt
  volumeMounts:
    - name: client-config
      mountPath: /usr/share/nginx/html
  volumes:
    - name: client-config
      configMap:
        name: client-config

secrets:
  postgres:
    adminPassword: ""  # To be set during deployment
    keycloakPassword: ""  # To be set during deployment
    muddiUser: ""  # To be set during deployment
    muddiPassword: ""  # To be set during deployment
    muddiDb: ""  # To be set during deployment

# Application settings
app:
  name: shiftplanner
  image:
    repository: your-registry/shiftplanner
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

# API settings
api:
  hostname: api.doppelschicht.{{ .Values.global.domain }}
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod

# Client settings
client:
  hostname: doppelschicht.{{ .Values.global.domain }}
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod

# Keycloak settings
keycloak:
  url: connect.{{ .Values.global.domain }}
  realm: muddi
  adminUser: admin
  adminPassword: admin
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod

# Database settings
postgresql:
  enabled: true
  auth:
    username: shiftplanner
    database: shiftplanner
    password: shiftplanner
  primary:
    persistence:
      size: 10Gi
      storageClass: standard

# Redis settings
redis:
  enabled: true
  auth:
    password: shiftplanner
  master:
    persistence:
      size: 5Gi
      storageClass: standard

# Backup settings
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  s3Bucket: shiftplanner-backups
  awsRegion: eu-central-1
  keepBackups: 7

# Logging settings
logging:
  defaultLevel: Information
  aspNetCoreLevel: Warning
  hubConnectionLevel: Information
  systemLevel: Warning 