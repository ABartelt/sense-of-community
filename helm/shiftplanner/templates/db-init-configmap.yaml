apiVersion: v1
kind: ConfigMap
metadata:
  name: shiftplanner-db-init
  labels:
    app: shiftplanner
data:
  init-shiftplanner.sql: |
    CREATE DATABASE shiftplanner;
    \c shiftplanner;
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    
    -- Create schema
    CREATE SCHEMA IF NOT EXISTS shiftplanner;
    
    -- Set search path
    SET search_path TO shiftplanner, public;
    
    -- Create tables
    CREATE TABLE IF NOT EXISTS shiftplanner.users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        external_id VARCHAR(255) NOT NULL UNIQUE,
        email VARCHAR(255) NOT NULL UNIQUE,
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS shiftplanner.shifts (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        title VARCHAR(255) NOT NULL,
        description TEXT,
        start_time TIMESTAMP WITH TIME ZONE NOT NULL,
        end_time TIMESTAMP WITH TIME ZONE NOT NULL,
        created_by UUID REFERENCES shiftplanner.users(id),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS shiftplanner.shift_assignments (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        shift_id UUID REFERENCES shiftplanner.shifts(id),
        user_id UUID REFERENCES shiftplanner.users(id),
        status VARCHAR(50) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(shift_id, user_id)
    );
    
    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_shifts_start_time ON shiftplanner.shifts(start_time);
    CREATE INDEX IF NOT EXISTS idx_shifts_end_time ON shiftplanner.shifts(end_time);
    CREATE INDEX IF NOT EXISTS idx_shift_assignments_shift_id ON shiftplanner.shift_assignments(shift_id);
    CREATE INDEX IF NOT EXISTS idx_shift_assignments_user_id ON shiftplanner.shift_assignments(user_id);
    
    -- Create updated_at trigger function
    CREATE OR REPLACE FUNCTION shiftplanner.update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    -- Create triggers
    CREATE TRIGGER update_users_updated_at
        BEFORE UPDATE ON shiftplanner.users
        FOR EACH ROW
        EXECUTE FUNCTION shiftplanner.update_updated_at_column();
    
    CREATE TRIGGER update_shifts_updated_at
        BEFORE UPDATE ON shiftplanner.shifts
        FOR EACH ROW
        EXECUTE FUNCTION shiftplanner.update_updated_at_column();
    
    CREATE TRIGGER update_shift_assignments_updated_at
        BEFORE UPDATE ON shiftplanner.shift_assignments
        FOR EACH ROW
        EXECUTE FUNCTION shiftplanner.update_updated_at_column(); 